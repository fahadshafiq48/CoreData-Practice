//
//  RemindersListViewController.swift
//  Fahad Test
//
//  Created by Mac on 21/11/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MBProgressHUD

protocol RemindersListDisplayLogic: AnyObject {
    func displayList(viewModel: RemindersList.GetList.ViewModel)
    func displayLocalList()
}

class RemindersListViewController: BaseViewController, RemindersListDisplayLogic {
    
    let flow = ZoomAndSnapFlowLayout()
    
    var interactorRemindersList: RemindersListInteractor? {
        return interactor as? RemindersListInteractor
    }
    
    var routerRemindersList: RemindersListRouter? {
        return router as? RemindersListRouter
    }
    
    // MARK: IBOutlets
    @IBOutlet weak var currentCentredItemTitleLBL: UILabel!
    @IBOutlet weak var carouselCollectionView: UICollectionView!
        
    // MARK: View Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }
}

extension RemindersListViewController {
    
    func setupUI() {
        flow.delegate = self
        
        carouselCollectionView.registerNib(ReminderCVC.reusableIdentifier)
        carouselCollectionView.dataSource = self
        carouselCollectionView.delegate = self
        //carouselCollectionView.decelerationRate = .fast // uncomment if necessary
        carouselCollectionView.collectionViewLayout = flow
        carouselCollectionView.contentInsetAdjustmentBehavior = .always
        
        hitAPI()
    }
    
    func hitAPI() {
        MBProgressHUD.showAdded(to: view, animated: true)
        interactorRemindersList?.getList(request: RemindersList.GetList.Request())
    }
}

extension RemindersListViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return interactorRemindersList?.dataSource.count ?? 0
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell: ReminderCVC = collectionView.dequeueReusableCell(for: indexPath)
        if let listData = interactorRemindersList?.dataSource[indexPath.row] {
            cell.delegate = self
            cell.setContent(item: listData)
        }
        return cell
    }
}

extension RemindersListViewController: RemminderCVCDelegate {
    func playBtnPressed(for cell: UICollectionViewCell) {
        let index = carouselCollectionView.indexPath(for: cell)
        if let item = index?.item, let itemData = interactorRemindersList?.dataSource[item] {
            routerRemindersList?.routeToReminderDetail(item: itemData)
        }
    }
}

// MARK: RemindersListDisplayLogic
extension RemindersListViewController {
    func displayList(viewModel: RemindersList.GetList.ViewModel) {
        MBProgressHUD.hide(for: view, animated: true)
        if let error = viewModel.error {
            print(error.localizedDescription)
            interactorRemindersList?.getLocalList()
            return
        }

        DispatchQueue.main.async { [weak self] in
            self?.currentCentredItemTitleLBL.text = viewModel.items?.first?.name ?? ""
            self?.carouselCollectionView.reloadData()
        }
    }
    
    func displayLocalList() {
        DispatchQueue.main.async { [weak self] in
            self?.currentCentredItemTitleLBL.text = self?.interactorRemindersList?.dataSource.first?.name ?? ""
            self?.carouselCollectionView.reloadData()
        }
    }
}

extension RemindersListViewController: ZoomAndSnapFlowLayoutDelegate {
    func cellIndexPathAtCentre(indexPath: IndexPath) {
        currentCentredItemTitleLBL.text = interactorRemindersList?.dataSource[indexPath.row].name ?? ""
        
        //TODO: Hide play button based on centred cell
//        interactorRemindersList?.dataSource[indexPath.row].isCentred = true
//        carouselCollectionView.reloadData()
    }
}
